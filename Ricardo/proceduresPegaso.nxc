#include "Motor.nxc"
#define MOTORS OUT_AB
#define CLAWMOTOR  OUT_C
#define ERRORGRADOS 2
#define velMin 30

int north;
int south;
int east;
int west;

long time;

bool fin;

sub inicio(){
    fin = TRUE;
}

sub final(){
    fin = FALSE;
}

bool verFin(){
    return fin;
}

// Revisado
sub startTime() {
	time = CurrentTick();
}

// Revisado
sub setInitialPosition(int n, int s, int e, int w) {
	north = n;
	south = s;
	east = e;
	west = w;
}


/*
 * inTime: Return false if we reach the total time,
 * otherwise return false.
 */

//Revisado
bool inTime(long totalTime){
  NumOut(1,LCD_LINE7,CurrentTick());
	if (abs(CurrentTick() - time) < totalTime) {
		return TRUE;
	}
	return FALSE;
}

/*
 * checkUs: Check the ultrasonic sensor.
 */

// Revisado
int checkUS() {
   int bound = 5;
   int res = 0;

   for (int i = 0 ; i < bound ; i++) {
      res = res + SensorUS(S2);
      ClearScreen();
      NumOut(1,LCD_LINE8,res);
   }

   res = res/bound;
   return res;
}

/*
 * degrees: Calculate the average of p measurements.
 */

// Revisado
int degrees(int p,int direccion) {
   int res = 0;
   int aux = 0;
   int cont = 0;

   for  (int i = 0 ;i < p; i++)  {
      aux = SensorHTCompass(S3);

      if (abs(aux - direccion) < 6){
         res = res + SensorHTCompass(S3);
         cont = cont + 1;
         ClearScreen();

      }
   }

   if (res == 0) {
      res = aux;
   } else {
     res = res/cont;
   }
   NumOut(1,LCD_LINE4,res);
   return res;
}

/*
  Función que calcula el mínimo entre dos números
*/
int minimo(int a, int b){
  if (a <= b) {
    return a;
  } else {
    return b;
  }
}

/*
 Función que recibe un angulo y hace que el robot gire hasta alcanzarlo
 Supone que los motores estan en los puertos A y B
 Se pueden utilizar los puntos cardinales relativos como argumento.
 */
sub girar(int dir){

  bool listo = FALSE;
  int error = 0;
  while (!listo){
  /*error es el calculo de la mínima distancia circular entre el angulo actual
    y el deseado
   Si esta distancia es mayor a el error máximo establecido el algorítmo seguirá
    produciendo
   un giro
   */
     error = minimo((dir + 360 - degrees(20, dir))%360 , (degrees(20, dir)+360-dir)%360);
    if( error >= ERRORGRADOS){
      /*
       Verifica si la distancia menor entre los angulos se alcanza por la izquierda
      */
      int fuerza = ((error*(100-velMin)/180) + velMin);
      if((dir-degrees(20, dir) + 360)%360 < 180){
        Off(MOTORS);
        /* gira a la izquierda con mayor velocidad mientras mayor sea el error
           donde la mínima velocidad es el valor de la variable velMin
        */

        OnRevSync(MOTORS, fuerza, -100);
      } else {
        Off(MOTORS);
        /* gira a la derecha con mayor velocidad mientras mayor sea el error
           donde la mínima velocidad es el valor de la variable velMin
        */
        OnFwdSync(MOTORS, fuerza, 100);
      }
    } else{
      Off(MOTORS);
      listo = TRUE;
    }
  }
}

/*
* turnLeft
*
*/

// Revisado
sub turnLeft(){
         MotorRotateAngle(OUT_B, 100, 650, 450, 0, 0);
         MotorStopSync(OUT_A, OUT_B);
         Wait(50);

}

sub turnRight(){
         MotorRotateAngle(OUT_A, 100, 680, 450, 0, 0);
         MotorStopSync(OUT_A, OUT_B);
         Wait(50);
}

sub getPosition(int finalPosition, int vel, int dist) {
	int rotate;
	int ch = 255;
	bool go = TRUE;
	int br = 0;
	div_t r;
	div_t ir;
	int garraVel = 80;
  int i = 1;
  int t = 0;

      while((go)&& (checkUS() > dist)){
                   ClearScreen();
                NumOut(1,LCD_LINE7,checkUS());

                br = degrees(20, finalPosition);
                rotate = finalPosition - br;

                NumOut(1,LCD_LINE8,br);





                while ((abs(rotate) >= 0)&&(go)&& (checkUS() > dist)) {
                      ClearScreen();

                      NumOut(1,LCD_LINE7,checkUS());

                      MotorStartSync(OUT_A, OUT_B, 70);

                      Wait(50);


                      br = degrees(20, finalPosition);

                      rotate = finalPosition - br;
                      NumOut(1,LCD_LINE8,br);

                      if (rotate > 2){ //Debe corregir para la derecha
                            NumOut(1,LCD_LINE8,br);
                            if(checkUS() < dist){
                                         break;

                            }

                         if (rotate > 7) {

                            OnFwdSyncPID(OUT_AB, 63, -20, 30, 50, 90);
                            Wait(100);
                        } else {

                            OnFwdSyncPID(OUT_AB, 63, -(2)*rotate, 30, 50, 90);
                            Wait(100);

                        }

                      }
                      else if(rotate <=2 && rotate !=0) {   //Debe corregir a la izquierda

                            NumOut(1,LCD_LINE8,br);
                             if(checkUS() < dist){
                                         break;

                            }

                           if (rotate < 7) {
                              OnFwdSyncPID(OUT_AB, 40, 23, 30, 50, 90);
                              Wait(150);
                           } else {
                                OnFwdSyncPID(OUT_AB, 40, (2)*rotate, 30, 50, 90);
                                Wait(150);
                           }

                      }


               }


       }

}

sub moveToWall(int direction,int dist, int lado){
    NumOut(1, LCD_LINE5, SENSOR_1);
    
         while (SENSOR_1 == 0){
                      PlaySound(5);
                      MotorStartSync(OUT_A, OUT_B, 70);
                      getPosition(direction,70, dist);
                      NumOut(1, LCD_LINE1, SENSOR_1);
         }

            Off(OUT_AB);
            PlaySound(3);
            PlaySound(3);
            RemoteStopProgram(1);

}


sub getPositionPegaso(int finalPosition, int vel, int dist) {
	int rotate;
	int ch = 255;
	bool go = TRUE;
	int br = 0;
	div_t r;
	div_t ir;
  int i = 1;
  int t = 0;

      while((go)&& (checkUS() > dist)){
                ClearScreen();
                //NumOut(1,LCD_LINE7,checkUS());

                br = degrees(40, finalPosition);
                rotate = finalPosition - br;

                NumOut(1,LCD_LINE8,br);





                while ((abs(rotate) >= 0)&&(go)&& (checkUS() > dist)) {
                      ClearScreen();

                      //NumOut(1,LCD_LINE7,checkUS());

                      OnRevSync(OUT_AB, 100, 0);

                      Wait(50);


                      br = degrees(40, finalPosition);

                      rotate = finalPosition - br;
                      NumOut(1,LCD_LINE8,br);

                      if (rotate > 2){ //Debe corregir para la derecha
                            NumOut(1,LCD_LINE8,br);
                            if(checkUS() < dist){
                                         break;

                            }

                         if (rotate > 7) {

                            OnRevSyncPID(OUT_AB, 63, -20, 30, 50, 90);
                            Wait(100);
                        } else {

                            OnRevSyncPID(OUT_AB, 63, -(2)*rotate, 30, 50, 90);
                            Wait(100);

                        }

                      }
                      else if(rotate <=2 && rotate !=0) {   //Debe corregir a la izquierda

                            NumOut(1,LCD_LINE8,br);
                             if(checkUS() < dist){
                                         break;

                            }

                           if (rotate < 7) {
                              OnRevSyncPID(OUT_AB, 40, 23, 30, 50, 90);
                              Wait(150);
                           } else {
                                OnRevSyncPID(OUT_AB, 40, (2)*rotate, 30, 50, 90);
                                Wait(150);
                           }

                      }


               }


       }

}


sub moveToWallPegaso(int direction, int dist, int lado){

    int ch;
    ch = 255;


    while(ch > dist){
             ch = checkUS();
             OnRevSyncEx(OUT_AB, 50, 0, RESET_ALL);
             Wait(150);
             getPositionPegaso(direction,70, dist);
    }

         Off(OUT_AB);

}
